// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RequestApprovalService.Domain;

#nullable disable

namespace RequestApprovalService.Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220501215525_InitialDBMigration")]
    partial class InitialDBMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("RequestApprovalService.Domain.Policy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Secret")
                        .HasColumnType("int");

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.HasKey("PolicyId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.HasKey("RequestId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.Share", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("X")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Y")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("UserId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.UserPolicies", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.ToTable("UserPolicies");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.UserRequests", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("UserAnswer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("UserRequests");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.Request", b =>
                {
                    b.HasOne("RequestApprovalService.Domain.Policy", null)
                        .WithMany("Requests")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestApprovalService.Domain.Share", b =>
                {
                    b.HasOne("RequestApprovalService.Domain.Policy", null)
                        .WithMany("Shares")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestApprovalService.Domain.User", null)
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestApprovalService.Domain.UserPolicies", b =>
                {
                    b.HasOne("RequestApprovalService.Domain.Policy", "Policy")
                        .WithMany("Users")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestApprovalService.Domain.User", "User")
                        .WithMany("Policies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.UserRequests", b =>
                {
                    b.HasOne("RequestApprovalService.Domain.Request", "Request")
                        .WithMany("Users")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestApprovalService.Domain.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.Policy", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Shares");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.Request", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RequestApprovalService.Domain.User", b =>
                {
                    b.Navigation("Policies");

                    b.Navigation("Requests");

                    b.Navigation("Shares");
                });
#pragma warning restore 612, 618
        }
    }
}
